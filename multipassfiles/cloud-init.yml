#cloud-config
locale: ja_JP.UTF8
timezone: Asia/Tokyo

package_update: true
package_upgrade: true
packages:
  - nginx
  - wget
  - libffi-dev
  - libssl-dev
  - zlib1g-dev
  - liblzma-dev
  - tk-dev
  - libbz2-dev
  - libreadline-dev
  - libsqlite3-dev
  - libopencv-dev
  - build-essential
  - git
  - ca-certificates
  - curl
  - gnupg
  - lsb-release

users:
  - default
  - name: ubuntu
    shell: /bin/bash
    sudo: ALL=(ALL) NOPASSWD:ALL
    groups: users
  - name: training
    shell: /bin/bash
    sudo: ALL=(ALL) NOPASSWD:ALL
    groups: users
    lock_passwd: false
    passwd: $6$rounds=4096$m2OZ2XjXIMbepOAM$34a8wJfiITwiRbL6JUmZqtu1jo41tsz6wRUXpzT9bb2zr3JU.ihp9cMZpNbZ7rs4M1HItuCZMfSsIrV9gtpNk.

write_files:
- content: |
    upstream webapi_gunicorn {
      server unix:/tmp/gunicorn.sock;
    }

    server {
      listen 80 default_server;

      keepalive_timeout 5;
      client_max_body_size 15M;

      location / {
        try_files $uri @proxy_to_app;
      }

      location /static {
        alias /home/ubuntu/training_webapi/staticfiles;
      }

      location @proxy_to_app {
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
        proxy_pass http://webapi_gunicorn;
      }

      error_page   500 502 503 504  /50x.html;
      location = /50x.html {
        root /usr/share/nginx/html;
      }
    }
  owner: root:root
  path: /etc/nginx/sites-available/default
  permissions: '0644'
- content: |
    [Unit]
    Description=MinIO
    Documentation=https://docs.min.io
    Wants=network-online.target
    After=network-online.target
    AssertFileIsExecutable=/usr/local/bin/minio

    [Service]
    WorkingDirectory=/usr/local

    User=ubuntu
    Group=ubuntu

    EnvironmentFile=-/etc/default/minio
    Environment=MINIO_ROOT_USER=admin
    Environment=MINIO_ROOT_PASSWORD=password
    ExecStart=/usr/local/bin/minio server /home/ubuntu/minio_data --console-address ":9001"

    # Let systemd restart this service always
    Restart=always

    # Specifies the maximum file descriptor number that can be opened by this process
    LimitNOFILE=65536

    # Specifies the maximum number of threads this process can create
    TasksMax=infinity

    # Disable timeout logic and wait until process is stopped
    TimeoutStopSec=infinity
    SendSIGKILL=no

    [Install]
    WantedBy=multi-user.target
  owner: root:root
  path: /etc/systemd/system/minio.service
  permissions: '0644'
- content: |
    [Unit]
    Description=gunicorn daemon
    After=network.target

    [Service]
    Type=forking
    WorkingDirectory=/home/ubuntu/training_webapi
    Environment=AWS_PROFILE=default
    Environment=AWS_S3_ENDPOINT_URL=http://127.0.0.1:9000
    ExecStart=/home/ubuntu/.pyenv/shims/poetry run gunicorn training.wsgi:application -k gevent -w 3 -b unix:/tmp/gunicorn.sock -p /tmp/gunicorn.pid --reload -D
    ExecStop=/bin/pkill gunicorn
    PIDFile=/tmp/gunicorn.pid
    Restart=always
    User=ubuntu
    Group=ubuntu

    [Install]
    WantedBy=multi-user.target
  owner: root:root
  path: /etc/systemd/system/gunicorn.service
  permissions: '0644'
- content: |
    cd /home/ubuntu/training_webapi
    /home/ubuntu/.pyenv/shims/poetry run python manage.py maintenance_mode $@
  owner: root:root
  path: /srv/maintenance.sh
  permissions: '0755'
- content: |
    #!/bin/bash
    arch=$(dpkg --print-architecture)
    # PostgreSQL in Docker
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo "deb [arch=${arch} signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    apt update
    apt install -y docker-ce docker-ce-cli containerd.io
    systemctl start docker.service
    systemctl enable docker.service
    docker run -d \
      --restart always \
      -p 5432:5432 \
      -v /home/ubuntu/postgres_data:/var/lib/postgres \
      -e POSTGRES_INITDB_ARGS="--encoding=UTF-8 --locale=C" \
      -e POSTGRES_PASSWORD="training_very_secret_password" \
      -e POSTGRES_NAME="training" \
      -e POSTGRES_USER="training" \
      -e PGDATA="/var/lib/postgres/data" \
      -e TZ="Asia/Tokyo" \
      postgres:12.11
    # Minio
    wget https://dl.min.io/server/minio/release/linux-${arch}/minio
    chmod +x ./minio
    mv ./minio /usr/local/bin/
    systemctl start minio.service
    systemctl enable minio.service
    wget https://dl.min.io/client/mc/release/linux-${arch}/mc
    chmod +x mc
    mv ./mc /usr/local/bin/
    sudo -u ubuntu mc mb /home/ubuntu/minio_data/training-store --region ap-northeast-1
    sudo -u ubuntu mc alias set training-store/ http://127.0.0.1:9000 admin password
    sudo -u ubuntu mc admin user add training-store access_key secret_key
    sudo -u ubuntu mc admin policy set training-store diagnostics,readwrite user=access_key
    # Nginx
    systemctl start nginx.service
    systemctl enable nginx.service
  owner: root:root
  path: /srv/setup.sh
  permissions: '0755'
- content: |
    #!/bin/bash
    git clone https://github.com/pyenv/pyenv ~/.pyenv
    echo 'export PYENV_ROOT="$HOME/.pyenv"' >> /home/ubuntu/.bashrc
    echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> /home/ubuntu/.bashrc
    echo 'eval "$(pyenv init --path)"' >> /home/ubuntu/.bashrc
    source /home/ubuntu/.bashrc
    /home/ubuntu/.pyenv/bin/pyenv install 3.10.5
    /home/ubuntu/.pyenv/bin/pyenv global 3.10.5
    /home/ubuntu/.pyenv/shims/pip install -U pip
  owner: root:root
  path: /srv/install_python.sh
  permissions: '0755'
- content: |
    #!/bin/bash -e
    source /home/ubuntu/.bashrc
    cd /home/ubuntu/training_webapi

    # Install dependencies
    /home/ubuntu/.pyenv/shims/pip install poetry
    /home/ubuntu/.pyenv/shims/poetry install --no-root

    # Configure AWS profile
    mkdir -p /home/ubuntu/.aws

    if [[ ! -e /home/ubuntu/.aws/config ]]; then
    cat > /home/ubuntu/.aws/config << EOF
    [profile default]
    region = ap-northeast-1
    output = json
    s3 =
      endpoint_url = http://127.0.0.1:9000
    EOF
    fi

    if [[ ! -e /home/ubuntu/.aws/credentials ]]; then
    cat > /home/ubuntu/.aws/credentials << EOF
    [default]
    aws_access_key_id = access_key
    aws_secret_access_key = secret_key
    EOF
    fi

    # Update S3 Bucket Policy
    /home/ubuntu/.pyenv/shims/poetry run aws s3api put-bucket-policy \
      --bucket training-store \
      --policy file://dockerfiles/files/s3_policy.json \
      --endpoint-url http://127.0.0.1:9000

    # Migration
    /home/ubuntu/.pyenv/shims/poetry run python manage.py migrate

    # Create superuser when out exists user
    /home/ubuntu/.pyenv/shims/poetry run python manage.py shell -c 'from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.filter(username="admin").exists() or User.objects.create_superuser(username="admin", email="admin@example.com", password="adminpassword")'

    # Collectstatic
    /home/ubuntu/.pyenv/shims/poetry run python manage.py collectstatic --no-input

    # Run server
    sudo systemctl start gunicorn.service
    sudo systemctl enable gunicorn.service
  owner: root:root
  path: /srv/start_server.sh
  permissions: '0755'
